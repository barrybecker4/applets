<?xml version="1.0" encoding="UTF-8"?>
<project default="deploy" name="applets">
  <description>usage:  d:/apps/ant1.5/bin/ant.bat -logfile t.log archive
  </description>

  <!-- enable or diable assertions when runnning -->
  <property name="assertionsFlag" value="-disableassertions"/>
  <!-- place where compiled classes go. images and resources also get copied here -->
  <property name="classesDir" value="../classes"/>
  <!-- place where all original source files come from. -->
  <property name="sourceDir" value="../source"/>
   <!-- place where all thirdparty libraries are located. -->
  <property name="libDir" value="../lib"/>
  <!-- place to put .class files, images and resources, so they can be jar'd up -->
  <property name="stagingDir" value="../temp/classes"/>

  <!-- Load additional tasks -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties">
    <classpath>
      <pathelement location="D:/apps/ant/lib/ant-contrib-0.1.jar"/>
    </classpath>
  </taskdef>

  <!-- source metrics -->
  <!--taskdef name="javancss" classname="javancss.JavancssAntTask">
    <classpath>
      <pathelement location="D:/apps/javaNCSS/javancss21.41/lib"/>
    </classpath>
  </taskdef-->

  <!-- need these for auto creation of applet html files -->
  <property file="appletHtmlCommon.properties"/>
  <property file="appletHtml_en.properties"/>

  <path id="compile.classpath">
    <pathelement location="${libDir}/vecmath.jar"/>
    <pathelement location="${libDir}/sun.jar"/>
    <pathelement location="${libDir}/jai_codec.jar"/>
    <pathelement location="${libDir}/jnlp.jar"/>
    <pathelement location="${libDir}/batik-awt-util.jar"/>
    <pathelement location="${libDir}/batik-bridge.jar"/>
    <pathelement location="${libDir}/batik-css.jar"/>
    <pathelement location="${libDir}/batik-dom.jar"/>
    <pathelement location="${libDir}/batik-ext.jar"/>
    <pathelement location="${libDir}/batik-extension.jar"/>
    <pathelement location="${libDir}/batik-gui-util.jar"/>
    <pathelement location="${libDir}/batik-gvt.jar"/>
    <pathelement location="${libDir}/batik-parser.jar"/>
    <pathelement location="${libDir}/batik-svg-dom.jar"/>
    <pathelement location="${libDir}/batik-svggen.jar"/>
    <pathelement location="${libDir}/batik-swing.jar"/>
    <pathelement location="${libDir}/batik-transcoder.jar"/>
    <pathelement location="${libDir}/batik-util.jar"/>
    <pathelement location="${libDir}/batik-xml.jar"/>
  </path>

  <target name="clean" depends="init" description="Cleans out all the existing compiled classes and $(distributionDir}">
    <delete dir="${classesDir}"/>
    <delete dir="${distributionDir}"/>
    <delete dir="${rmiClientDir}"/>
    <delete dir="${rmiServerDir}"/>
  </target>

  <target name="init">
    <mkdir dir="${classesDir}"/>
    <mkdir dir="${distributionDir}"/>
    <mkdir dir="${rmiClientDir}"/>
    <mkdir dir="${rmiServerDir}"/>
  </target>

  <target name="compile" depends="init" description="Compiles the source code">
    <javac debug="yes" deprecation="on" destdir="${classesDir}"
        nowarn="false" optimize="yes" srcdir="${sourceDir}" verbose="false" source="1.4">
       <classpath refid="compile.classpath"/>
    </javac>
  </target>

  <!--target name="game metrics" depends="compile"
description="calculate
metrics (eg lines of code) for all the source files in the project">
    <javancss srcdir="${sourceDir}/com/becker/game" generateReport="true"
outputfile="performance/javancss_metrics.txt" format="plain">
      <include name="**/*.java"/>
    </javancss>
  </target-->

  <target name="deploy" depends="compile"
      description="deploys the built jar files to the ${distributionDir} dir so they can be bulk copied to a website">
    <mkdir dir="${stagingDir}"/>

    <!--//////////////// create my jar files
//////////////////////////////-->
    <!-- copy the core class files that are needed for all my applets.
Produces common.jar -->
    <copy todir="${stagingDir}">
      <fileset dir="${classesDir}">
        <include name="com/becker/common/*.class"/>
        <include name="com/becker/ui/*.class"/>
        <include name="com/becker/java2d/ImageUtil.class"/>
      </fileset>
      <mapper from="*.class" to="*.class" type="glob"/> <!-- preserve hierarchy -->
    </copy>
    <jar basedir="${stagingDir}" compress="true"
destfile="${distributionDir}/common.jar"/>
    <delete dir="${stagingDir}/com"/>

    <!-- copy the class files that are needed for programs that want to do optimization. Produces optimization.jar-->
    <copy todir="${stagingDir}">
      <fileset dir="${classesDir}">
        <include name="com/becker/optimization/*.class"/>
      </fileset>
      <mapper from="*.class" to="*.class" type="glob"/> <!-- preserve hierarchy -->
    </copy>
    <jar basedir="${stagingDir}" compress="true"
destfile="${distributionDir}/optimization.jar"/>
    <delete dir="${stagingDir}/com"/>

    <!-- copy the class files that are needed for programs that want to have sound. Produces sound.jar-->
    <copy todir="${stagingDir}">
      <fileset dir="${classesDir}">
        <include name="com/becker/sound/*.class"/>
      </fileset>
      <mapper from="*.class" to="*.class" type="glob"/> <!-- preserve hierarchy -->
    </copy>
    <antcall target="copyResources">
      <param name="path" value="sound"/>
      <param name="pattern" value="*.wav"/>
    </antcall>
    <jar basedir="${stagingDir}" compress="true" destfile="${distributionDir}/sound.jar"/>
    <delete dir="${stagingDir}/com"/>

    <!-- copy just the core class files that are needed for all the games. Produces gameCore.jar -->
    <copy todir="${stagingDir}">
      <fileset dir="${classesDir}">
        <include name="com/becker/game/core/*.class"/>
        <include name="com/becker/game/core/ui/*.class"/>
        <include name="com/becker/game/core/search/*.class"/>
        <include name="com/becker/java2d/*Gradient*.class"/>
      </fileset>
      <mapper from="*.class" to="*.class" type="glob"/> <!-- preserve hierarchy -->
    </copy>
    <antcall target="copyResources">
      <param name="path" value="game/core/ui/images"/>
      <param name="pattern" value="*.png"/>
    </antcall>
    <antcall target="copyResources">
      <param name="path" value="game/core/ui/images"/>
      <param name="pattern" value="*.gif"/>
    </antcall>
    <antcall target="copyResources">
      <param name="path" value="game/core/resources"/>
      <param name="pattern" value="*.properties"/>
    </antcall>
    <jar basedir="${stagingDir}" compress="true" destfile="${distributionDir}/gameCore.jar"/>
    <delete dir="${stagingDir}/com"/>

    <!-- copy the class files that are needed for pente deployment -->
    <copy todir="${stagingDir}">
      <fileset dir="${classesDir}">
        <include name="com/becker/game/pente/*.class"/>
        <include name="com/becker/game/pente/ui/*.class"/>
      </fileset>
      <mapper from="*.class" to="*.class" type="glob"/> <!-- preserve hierarchy -->
    </copy>
    <antcall target="copyResources">
      <param name="path" value="game/pente/ui/images"/>
      <param name="pattern" value="*.png"/>
    </antcall>
    <antcall target="copyResources">
      <param name="path" value="game/pente/resources"/>
      <param name="pattern" value="*.properties"/>
    </antcall>
    <jar basedir="${stagingDir}" compress="true" destfile="${distributionDir}/pente.jar"/>
    <delete dir="${stagingDir}/com"/>

    <!-- copy the class files that are needed for blockade deployment -->
    <copy todir="${stagingDir}">
      <fileset dir="${classesDir}">
        <include name="com/becker/game/blockade/*.class"/>
        <include name="com/becker/game/blockade/ui/*.class"/>
      </fileset>
      <mapper from="*.class" to="*.class" type="glob"/> <!-- preserve hierarchy -->
    </copy>
    <antcall target="copyResources">
      <param name="path" value="game/blockade/resources"/>
      <param name="pattern" value="*.properties"/>
    </antcall>
    <jar basedir="${stagingDir}" compress="true" destfile="${distributionDir}/blockade.jar"/>
    <delete dir="${stagingDir}/com"/>

    <!-- copy the class files that are needed for checkers deployment -->
    <copy todir="${stagingDir}">
      <fileset dir="${classesDir}">
        <include name="com/becker/game/checkers/*.class"/>
        <include name="com/becker/game/checkers/ui/*.class"/>
      </fileset>
      <mapper from="*.class" to="*.class" type="glob"/> <!-- preserve hierarchy -->
    </copy>
    <antcall target="copyResources">
      <param name="path" value="game/checkers/resources"/>
      <param name="pattern" value="*.properties"/>
    </antcall>
    <jar basedir="${stagingDir}" compress="true" destfile="${distributionDir}/checkers.jar"/>
    <delete dir="${stagingDir}/com"/>

    <!-- copy the class files that are needed for chess deployment -->
    <copy todir="${stagingDir}">
      <fileset dir="${classesDir}">
        <include name="com/becker/game/checkers/*.class"/>
        <include name="com/becker/game/chess/*.class"/>
         <include name="com/becker/game/checkers/ui/*.class"/>
        <include name="com/becker/game/chess/ui/*.class"/>
      </fileset>
      <mapper from="*.class" to="*.class" type="glob"/> <!-- preserve hierarchy -->
    </copy>
    <antcall target="copyResources">
      <param name="path" value="game/chess/ui/images"/>
      <param name="pattern" value="*.png"/>
    </antcall>
    <antcall target="copyResources">
      <param name="path" value="game/chess/resources"/>
      <param name="pattern" value="*.properties"/>
    </antcall>
    <jar basedir="${stagingDir}" compress="true" destfile="${distributionDir}/chess.jar"/>
    <delete dir="${stagingDir}/com"/>

    <!-- copy the class files that are needed for go deployment -->
    <copy todir="${stagingDir}">
      <fileset dir="${classesDir}">
        <include name="com/becker/game/go/*.class"/>
        <include name="com/becker/game/go/ui/*.class"/>
        <include name="ca/dj/jigo/sgf/*.class"/>
        <include name="ca/dj/jigo/sgf/tokens/*.class"/>
      </fileset>
      <mapper from="*.class" to="*.class" type="glob"/> <!-- preserve hierarchy -->
    </copy>
    <antcall target="copyResources">
      <param name="path" value="game/go/ui/images"/>
      <param name="pattern" value="*.png"/>
    </antcall>
    <antcall target="copyResources">
      <param name="path" value="game/go/resources"/>
      <param name="pattern" value="*.properties"/>
    </antcall>
    <jar basedir="${stagingDir}" compress="true" destfile="${distributionDir}/go.jar"/>
    <delete dir="${stagingDir}/com"/>
    <delete dir="${stagingDir}/ca"/>

    <!-- copy the class files that are needed for maze deployment -->
    <copy todir="${stagingDir}">
      <fileset dir="${classesDir}">
        <include name="com/becker/maze/*.class"/>
      </fileset>
      <mapper from="*.class" to="*.class" type="glob"/> <!-- preserve directory hierarchy -->
    </copy>
    <jar basedir="${stagingDir}" compress="true" destfile="${distributionDir}/maze.jar"/>
    <delete dir="${stagingDir}/com"/>

    <!-- copy the class files that are needed for snake deployment -->
    <copy todir="${stagingDir}">
      <fileset dir="${classesDir}">
        <include name="com/becker/snake/*.class"/>
      </fileset>
      <mapper from="*.class" to="*.class" type="glob"/> <!-- preserve directory hierarchy -->
    </copy>
    <jar basedir="${stagingDir}" compress="true" destfile="${distributionDir}/snake.jar"/>
    <delete dir="${stagingDir}/com"/>

    <!-- copy the class files that are needed for spirograph deployment -->
    <copy todir="${stagingDir}">
      <fileset dir="${classesDir}">
        <include name="com/becker/spirograph/*.class"/>
      </fileset>
      <mapper from="*.class" to="*.class" type="glob"/> <!-- preserve hierarchy -->
    </copy>
    <jar basedir="${stagingDir}" compress="true" destfile="${distributionDir}/spirograph.jar"/>
    <delete dir="${stagingDir}/com"/>

    <!-- copy the class files that are needed for redpuzzle deployment -->
    <copy todir="${stagingDir}">
      <fileset dir="${classesDir}">
        <include name="com/becker/redpuzzle/*.class"/>
      </fileset>
      <mapper from="*.class" to="*.class" type="glob"/> <!-- preserve directory hierarchy -->
    </copy>
    <jar basedir="${stagingDir}" compress="true" destfile="${distributionDir}/redpuzzle.jar"/>
    <sleep seconds="2" />
    <delete dir="${stagingDir}/com"/>

    <copy file="${libDir}/vecmath.jar" tofile="${distributionDir}/vecmath.jar"/>
    <copy file="${libDir}/sun.jar" tofile="${distributionDir}/sun.jar"/>
    <copy file="${libDir}/jai_codec.jar" tofile="${distributionDir}/jai_codec.jar"/>


<!--/////////////////////////////////////////////////////////////////////////////////////-->

    <!-- auto generate the TRs for the table which shows the list of
applets in the index page-->
    <echo message="Generating Table: ${appletHtml.appletList}"/>

    <echo message="copying ${sourceDir}/html/${appletIndexFile} to ${distributionDir}/${appletIndexFile}"/>
    <copy file="${sourceDir}/html/${appletIndexFile}" tofile="${distributionDir}/${appletIndexFile}"/>

    <foreach delimiter="," list="${appletHtml.appletList}" param="token" target="tr_substitute">
    </foreach>
    <foreach delimiter="," list="${appletHtml.appletList}" param="applet" target="substitute_for_indexfile">
    </foreach>

    <!-- instead of copying hand edited html and jnlps for each applet, I will generate them
    automatically from base tempaltes and a properties file that specifies the substitutions
    to make.    -->
    <echo message="The applets to create files for are: ${appletHtml.appletList}"/>
    <foreach delimiter="," list="${appletHtml.appletList}" param="appletName" target="create_applet_pages">
    </foreach>
  </target>


  <target name="deployRMIServer" depends="compile"
      description="deploys rmi server stubs to ${rmiServerDir} dir so they can be accessed via rmi">

    <!-- create stub file(s) -->
    <rmic classname="com.becker.server.ComputeEngine" stubversion="1.2" debug="yes" base="${classesDir}" >
      <classpath refid="compile.classpath"/>
    </rmic>
    <!-- distribute stub file(s) and class files for the RMI server -->
    <copy todir="${rmiServerDir}">
      <fileset dir="${classesDir}">
        <include name="com/becker/server/*.class"/> <!-- this includes ComputeEngine_stub.class -->
        <include name="com/becker/common/*.class"/>
      </fileset>
      <mapper from="*.class" to="*.class" type="glob"/> <!-- preserve hierarchy -->
    </copy>
  </target>

  <target name="deployRMIClient" depends="compile"
      description="deploys rmi client stubs to ${rmiClientDir} dir so they can be accessed via rmi">

    <!-- distribute stub file(s) and class files for the RMI client -->
    <copy todir="${rmiClientDir}">
      <fileset dir="${classesDir}">
        <include name="com/becker/client/Pi.class"/> <!-- this includes ComputeEngine_stub.class -->
      </fileset>
      <mapper from="*.class" to="*.class" type="glob"/> <!-- preserve hierarchy -->
    </copy>
  </target>

  <target name="create_applet_pages">
    <echo level="warning" message="Now creating html and jnlp for : ${appletName}"/>

    <!-- there are 2 web files for each app to make substitutions in -->
    <property name="suffices" value="html,jnlp"/>
    <foreach delimiter="," list="${suffices}" param="suffix" target="substitute_for_file">
      <param name="applet" value="${appletName}"/>
    </foreach>
  </target>

  <target name="substitute_for_file">
    <propertycopy from="${suffix}.replacementList" name="replacementList"/>
    <echo message="${suffix}.replacementList : ${replacementList}"/>
    <copy file="${sourceDir}/html/applet_template.${suffix}" tofile="${distributionDir}/${appletName}.${suffix}"/>
    <!-- now replace all the keys in this jnlp file -->
    <foreach delimiter="," list="${replacementList}" param="token" target="substitute">
      <param name="replaceFile" value="${distributionDir}/${appletName}.${suffix}"/>
      <param name="applet" value="${appletName}"/>
    </foreach>
  </target>

  <target name="substitute_for_indexfile">
    <propertycopy from="htmlindex.replacementList" name="replacementList"/>
    <!-- now replace all the keys in this jnlp file -->
    <foreach delimiter="," list="${replacementList}" param="token" target="substitute_in_index">
      <param name="replaceFile" value="${distributionDir}/${appletIndexFile}"/>
      <param name="applet" value="${applet}"/>
    </foreach>
  </target>

  <target name="substitute">
    <propertycopy from="${applet}.${token}" name="newValue"/>
    <!--echo message="Substitute ${token} for ${applet}.${token} = ${newValue} in ${replaceFile}"/-->
    <replace file="${replaceFile}" token="{${token}}" value="${newValue}"/>
  </target>

  <target name="substitute_in_index">
    <propertycopy from="${applet}.${token}" name="newValue"/>
    <!--echo message="Substitute ${newValue} for ${applet}.${token} in ${replaceFile}"/-->
    <replace file="${replaceFile}" token="{${applet}.${token}}" value="${newValue}"/>
  </target>

  <target name="tr_substitute">
    <property name="appName" value="${token}"/>
    <property name="TRTemplate"
        value="${TRTemplate1}${appName}.title${TRTemplate2}${appName}.longDescription${TRTemplate3}${appName}${TRTemplate4}${appName}${TRTemplate5}${appName}${TRTemplate6}${appName}${TRTemplate7}${appName}${TRTemplate8}${appName}.title${TRTemplate9}${appName}.title${TRTemplate10}${appName}.imgWidth${TRTemplate11}${appName}.imgHeight${TRTemplate12}"/>
    <echo message="TR Substitute ${TRTemplate}"/>
    <replace file="${distributionDir}/${appletIndexFile}" token="{${token}TR}" value="${TRTemplate}"/>
  </target>

  <!-- copies specified files to both classes dir and staging dir -->
  <target name="copyResources">
    <echo message="copying ${path}"/>
    <copy todir="${classesDir}">
      <fileset dir="${sourceDir}">
        <include name="com/becker/${path}/${pattern}"/>
      </fileset>
      <mapper from="${pattern}" to="${pattern}" type="glob"/>   <!-- preserve hierarchy -->
    </copy>
    <copy todir="${stagingDir}">
      <fileset dir="${sourceDir}">
        <include name="com/becker/${path}/${pattern}"/>
      </fileset>
      <mapper from="${pattern}" to="${pattern}" type="glob"/>   <!-- preserve hierarchy -->
    </copy>
  </target>



  <!--*********** Tasks to execute my programs ***********-->

  <target name="executePente" depends="compile" description=" run the pente program">
    <java classname="${gameAppClass}" classpath="${classesDir}" fork="true" maxmemory="340M">
        <arg value="pente"/>
        <jvmarg value="-Xms128M"/>
        <jvmarg value="-Xmx256M"/>
        <jvmarg value="${assertionsFlag}"/>
     </java>
  </target>

 <target name="executeBlockade" depends="compile" description=" run the blockade program">
    <java classname="${gameAppClass}" classpath="${classesDir}" fork="true">
        <arg value="blockade"/>
        <jvmarg value="-Xms128M"/>
        <jvmarg value="-Xmx256M"/>
        <jvmarg value="${assertionsFlag}"/>
    </java>
  </target>

 <target name="executeCheckers" depends="compile" description=" run the checkers program">
    <java classname="${gameAppClass}" classpath="${classesDir}" fork="true">
        <arg value="checkers"/>
        <jvmarg value="-Xms128M"/>
        <jvmarg value="-Xmx256M"/>
        <jvmarg value="${assertionsFlag}"/>
    </java>
  </target>

   <target name="executeChess" depends="compile" description=" run the chess program">
    <java classname="${gameAppClass}" classpath="${classesDir}" fork="true">
        <arg value="chess"/>
        <jvmarg value="-Xms128M"/>
        <jvmarg value="-Xmx256M"/>
        <jvmarg value="${assertionsFlag}"/>
    </java>
  </target>

  <target name="executeGo" depends="compile" description=" run the Go program">
    <java classname="${gameAppClass}" classpath="${classesDir}" fork="true" maxmemory="256M">
        <arg value="go"/>
        <jvmarg value="-Xms128M"/>
        <jvmarg value="-Xmx256M"/>
        <jvmarg value="${assertionsFlag}"/>
    </java>
  </target>

  <target name="executeMaze" depends="compile" description=" run the Maze program">
    <java classname="com.becker.maze.MazeSimulator" classpath="${classesDir}"
fork="true">
        <jvmarg value="-Xms128M"/>
        <jvmarg value="-Xmx256M"/>
        <jvmarg value="${assertionsFlag}"/>
    </java>
  </target>

   <target name="executeSnake" depends="compile" description=" run the Snake simulation program">
    <java classname="com.becker.snake.SnakeApplet" classpath="${classesDir};${libDir}/vecmath.jar;${libDir}/jai_codec.jar" fork="true">
        <jvmarg value="-Xms128M"/>
        <jvmarg value="-Xmx256M"/>
        <jvmarg value="${assertionsFlag}"/>
    </java>
  </target>

  <target name="executeSpiroGraph" depends="compile" description=" run the SpiroGraph program">
    <java classname="com.becker.spirograph.SpiroGraph" classpath="${classesDir};${libDir}/jai_codec.jar" fork="true">
        <jvmarg value="-Xms128M"/>
        <jvmarg value="-Xmx256M"/>
        <jvmarg value="${assertionsFlag}"/>
    </java>
  </target>

  <target name="executeSuperSpiroGraph" depends="compile" description=" run the SuperSpiroGraph program">
    <java classname="com.becker.spirograph.SuperSpiroGraph" classpath="${classesDir};${libDir}/jai_codec.jar" fork="true">
        <jvmarg value="-Xms128M"/>
        <jvmarg value="-Xmx256M"/>
        <jvmarg value="${assertionsFlag}"/>
    </java>
  </target>

  <target name="executeLiquid" depends="compile" description=" run the Liquid simulator">
    <echo message="now excuting liquid simulation"/>
    <java classname="com.becker.liquid.LiquidSimulator" classpath="${classesDir};${libDir}/vecmath.jar" fork="true" maxmemory="256M"/>
  </target>

  <target name="executeRedPuzzle" depends="compile" description=" run the Red Puzzle simulator">
    <echo message="now executing red puzzle"/>
    <java classname="com.becker.redpuzzle.RedPuzzle" classpath="${classesDir}" fork="true" maxmemory="128M"/>
  </target>

  <target name="showFonts" depends="compile">
    <java classname="com.becker.java2d.examples.ShowFonts" classpath="${classesDir}"/>
  </target>

  <!-- use these next 2 tasks to run rmi. Run the server on one machine and the client on another. -->
  <target name="startRMIServer" depends="deployRMIServer" description=" run the RMI Server">
    <echo message="now starting rmiregistry and executing compute engine"/>
    <!-- first start the rmiregistry. The does an asynchronous exec.
    <exec executable="antRunAsync.bat" vmlauncher="false" failonerror="false">
        <env key="ANTRUN_OUTPUT" value="d:/becker/ant.output"/>
        <arg line="rmiregistry 2003"></arg>
    </exec>
    <sleep seconds="2" />
    <echo message="done starting rmi registry."/>
    -->
    <java classname="com.becker.server.ComputeEngine" classpath="${classesDir};${rmiServerDir}" fork="true">
        <jvmarg value="-Djava.rmi.server.codebase=file:/${rmiServerDir}"/>
        <jvmarg value="-Djava.rmi.server.hostname=${hostname}"/>
        <jvmarg value="-Djava.security.policy=java.policy"/>
        <jvmarg value="-Xms128M"/>
        <jvmarg value="-Xmx256M"/>
        <arg value="becker-hm2"/>
        <arg value="2020"/>
    </java>
    <echo message="done starting rmi compute server."/>
  </target>

  <target name="startRMIClient" depends="deployRMIClient" description=" run the RMI Client to execute a task on the server">
    <echo message="now starting the rmi client"/>
    <java classname="com.becker.client.ComputePi" classpath="${classesDir};${rmiClientDir}" fork="true">
        <jvmarg value="-Djava.rmi.server.codebase=file:/${rmiClientDir}"/>
        <jvmarg value="-Djava.security.policy=java.policy"/>
        <jvmarg value="-Xms32M"/>
        <jvmarg value="-Xmx64M"/>
        <arg value="becker-hm2"/>   <!-- hostname -->
        <arg value="2020"/>       <!-- rmi port number -->
        <arg value="500"/>      <!-- number of decimal places to compute pi to -->
    </java>
    <echo message="done starting rmi compute server."/>
  </target>

</project>


