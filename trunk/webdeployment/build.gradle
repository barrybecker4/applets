// Copyright by Barry G. Becker, 2013. Licensed under MIT License: http://www.opensource.org/licenses/MIT

import org.apache.tools.ant.filters.ReplaceTokens
version = '1.0'

ext.distributionGameDir="$distributionDir/applets"
ext.distributionSchemaDir="$distributionDir/schema"

// Location of all the project related files.
// The environment variable PROJECT_HOME needs to be set to something like:
//    E:/projects/java_projects/trunk   (on Windows)   or
//    /windows/projects/java_projects/trunk (on Linux)
ext.project_home="$System.env.PROJECT_HOME"

// Location of java SDK
ext.java_home="$System.env.JAVA_HOME"


dependencies {
    compile project(':optimization')
    compile project(':sound')
    compile project(':imageproc')
    compile project(':puzzle')
    compile project(':game')
    compile project(':apps')
}

task showProperties(description: "shows some properties") << {
    println "Project: $project"
    println "Name: $name"
    println "Path: $path"
    println "Project directory: $projectDir"
    println "Build directory: $buildDir"
    println "Version: $version"
    println "Group: $project.group"
    println "Description: $project.description"
    println "AntBuilder: $ant"
    println "codebase: $codebase"
    println "distributionDir: $distributionDir"
    println "distributionGameDir: $distributionGameDir"
    println "projectHome: $project_home"
    println "projectHome: $uiDir"
}

clean.doLast {
    // project. is needed to disambiguate from the clean tasks existing delete.
    project.delete ("$distributionDir", "$stagingDir")
}

// Should be able to have a type: CopyTask and use << instead of doLast
task deployImages(description: "Copy image files to $distributionGameDir")  {

    doLast {
        copy {
            from "$sourceDir/images"
            into "$distributionGameDir"
            include '**/*.jpg'
            include '**/*.png'
            include '**/*.gif'
        }
    }
}

// Should be able to have a type: CopyTask and use << instead of doLast
task deploySchemas(description: "Copy schema files to $distributionDir") {

     doLast {
         copy {
             from fileTree("$project_home").files
             into "$distributionSchemaDir"
             include "**/*.dtd"
             include "**/*.xsd"
         }
     }
}

task deployJars(description: "Deploys jar files needed for running applets and web start applications") {

    doLast {
        println "deployJars to $distributionGameDir from $project_home"
        copy {
            from fileTree("$project_home").files
            into "$distributionGameDir"
            include "bb4-*.jar"
            include "jhlabs-1.0.3.jar"
            include "jigo-sgf-1.1.jar"
        }
    }
}

task deploy(dependsOn: [compileJava, deployImages, deploySchemas, deployJars],
            description: "Deploys all files  to $distributionGameDir so they can be bulk copied to a website") << {
    apply from: 'appletHtmlCommon.gradle'
    //println "appletIndexFile: " + appletIndexFile

    // copy all the js, css, image files (should only be done once, not once per locale)
    copy {
        from "$sourceDir/html"
        into "$distributionGameDir/.."
        include '*.js'
        include '*.css'
        include '*.gif'
    }

    /* there needs to be a separate set of html and jnlp files for each locale */
    println "localesList="+ appletHtml.localesList
    appletHtml.localesList.each {
        locale -> createHtmlForLocale(locale)
    }
}

/**
 * Deploys all the html files for the given locale.
 * This includes the index page, javascript, and individual applet/jnlp files.
 */
void createHtmlForLocale(Locale locale) {

    def labels = ResourceBundle.getBundle('html', locale)

    // make these replacements when copying
    def replacements = new HashMap()
    htmlIndex.get("replacementList").each {
        key -> if (labels.containsKey(key)) {
            replacements.put(key, labels.getString(key))
        }
    }
    //println "repalcements="+replacements
    //def secondReplacements = [penteTR:"penteNNNNEWEEWEWETRRTRTT"]

    copy {
        from "$sourceDir/html/" + appletIndexFile['base']
        into "$distributionGameDir/.."
        rename { String fileName ->
            fileName.replace('.html', '_' + locale.toString() + '.html')
        }
        filter(ReplaceTokens, tokens: replacements, beginToken: '{', endToken: '}')
        //filter(ReplaceTokens, tokens: secondReplacements, beginToken: '{', endToken: '}')
    }
}

/*
task i18n(description:"i18n test") << {
    def locales = [Locale.ENGLISH, Locale.JAPANESE, Locale.GERMAN]
    def keys = [ "s1", "s2", "s3" ]
    [locales, keys].combinations().each{ locale, key ->
        def labels = ResourceBundle.getBundle('html', locale)
        println "Locale = ${locale.toString()}, key = $key, value = ${labels.getString(key)}"
    }
} */